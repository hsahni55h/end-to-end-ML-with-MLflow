name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md' # Ignore changes to README.md to avoid unnecessary workflow runs

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3
        # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it

      # Step 2: Lint Code
      - name: Lint code
        run: echo "Linting repository"
        # Placeholder for linting code (e.g., using flake8, pylint, etc.)

      # Step 3: Run Unit Tests
      - name: Run unit tests
        run: echo "Running unit tests"
        # Placeholder for running unit tests (e.g., using pytest, unittest, etc.)

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration # This job depends on the 'integration' job
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3
        # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it

      # Step 2: Install Utilities
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
        # Installs jq and unzip, which might be needed for further steps

      # Step 3: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        # Configures AWS credentials using GitHub secrets to interact with AWS services

      # Step 4: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        # Logs into Amazon ECR to allow Docker image push

      # Step 5: Build, Tag, and Push Image to Amazon ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Push Docker image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Output the Docker image URL
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
  Continuous-Deployment:
    needs: build-and-push-ecr-image # This job depends on the 'build-and-push-ecr-image' job
    runs-on: self-hosted # Runs on a self-hosted runner
    steps:
      # Step 1: Checkout Code
      - name: Checkout
        uses: actions/checkout@v3
        # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it

      # Step 2: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        # Configures AWS credentials using GitHub secrets to interact with AWS services

      # Step 3: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        # Logs into Amazon ECR to allow Docker image pull

      # Step 4: Pull Latest Images
      - name: Pull latest images
        run: |
         docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
        # Pulls the latest Docker image from ECR

      # Step 5: Run Docker Image to Serve Users
      - name: Run Docker Image to serve users
        run: |
         docker run -d -p 8080:8080 --name=mlproj \
         -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
         -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
         -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
         ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
        # Runs the Docker container with the pulled image, exposing port 8080 and setting AWS environment variables

      # Step 6: Clean Previous Images and Containers
      - name: Clean previous images and containers
        run: |
         docker system prune -f
        # Cleans up unused Docker images and containers to free up space
